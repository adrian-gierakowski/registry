name: registry
version: 0.1.0.0
synopsis: the Registry data structure can be used for "dependency injection"
          but also to assemble JSON encoders/decoders or Hedgehog generators

description: This library provides a "Registry" which is a data structure containing
             a list of functions and values representing dependencies in a
             directed acyclic graph.
             A `make` function can then be used to create a value of a specific
             type out of the registry.

maintainer: etorreborre@yahoo.com
git: https://github.com/etorreborre/registry

ghc-options:
  -Wall
  -fhide-source-paths
  -fprint-potential-instances
  -optP-Wno-nonportable-include-path

default-extensions:
 - FlexibleContexts
 - FlexibleInstances
 - LambdaCase
 - MultiParamTypeClasses
 - NoImplicitPrelude
 - OverloadedStrings
 - Rank2Types
 - ScopedTypeVariables
 - ScopedTypeVariables
 - TupleSections
 - TypeApplications
 - TypeOperators

dependencies:
  - base       >= 4.7 && < 5
  - exceptions           < 0.11
  - protolude            < 0.3
  - resourcet            < 1.3
  - text                 < 2
  - transformers         < 0.6
  - transformers-base    < 0.5

library:
  source-dirs: src

tests:
  spec:
    main: test.hs
    source-dirs:
      - test
    dependencies:
      - registry
      - async            < 2.3
      - hedgehog         < 0.7
      - hedgehog-corpus  < 0.2
      - io-memoize       < 1.2
      - tasty            < 1.2
      - tasty-discover   < 4.3
      - tasty-hedgehog   < 0.3
      - tasty-th         < 0.2
      - text             < 2

    ghc-options:
      -threaded
      -rtsopts
      -with-rtsopts=-N
      -fno-warn-orphans
      -fno-warn-missing-signatures
      -optP-Wno-nonportable-include-path
